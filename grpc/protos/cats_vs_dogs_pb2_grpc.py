# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import cats_vs_dogs_pb2 as cats__vs__dogs__pb2


class CatsVsDogsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CatsVsDogsTensorflowInference = channel.unary_unary(
                '/cats_vs_dogs.CatsVsDogsService/CatsVsDogsTensorflowInference',
                request_serializer=cats__vs__dogs__pb2.CatsVsDogsRequest.SerializeToString,
                response_deserializer=cats__vs__dogs__pb2.CatsVsDogsResponse.FromString,
                )
        self.CatsVsDogsPyTorchInference = channel.unary_unary(
                '/cats_vs_dogs.CatsVsDogsService/CatsVsDogsPyTorchInference',
                request_serializer=cats__vs__dogs__pb2.CatsVsDogsRequest.SerializeToString,
                response_deserializer=cats__vs__dogs__pb2.CatsVsDogsResponse.FromString,
                )


class CatsVsDogsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CatsVsDogsTensorflowInference(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CatsVsDogsPyTorchInference(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CatsVsDogsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CatsVsDogsTensorflowInference': grpc.unary_unary_rpc_method_handler(
                    servicer.CatsVsDogsTensorflowInference,
                    request_deserializer=cats__vs__dogs__pb2.CatsVsDogsRequest.FromString,
                    response_serializer=cats__vs__dogs__pb2.CatsVsDogsResponse.SerializeToString,
            ),
            'CatsVsDogsPyTorchInference': grpc.unary_unary_rpc_method_handler(
                    servicer.CatsVsDogsPyTorchInference,
                    request_deserializer=cats__vs__dogs__pb2.CatsVsDogsRequest.FromString,
                    response_serializer=cats__vs__dogs__pb2.CatsVsDogsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cats_vs_dogs.CatsVsDogsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CatsVsDogsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CatsVsDogsTensorflowInference(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cats_vs_dogs.CatsVsDogsService/CatsVsDogsTensorflowInference',
            cats__vs__dogs__pb2.CatsVsDogsRequest.SerializeToString,
            cats__vs__dogs__pb2.CatsVsDogsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CatsVsDogsPyTorchInference(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cats_vs_dogs.CatsVsDogsService/CatsVsDogsPyTorchInference',
            cats__vs__dogs__pb2.CatsVsDogsRequest.SerializeToString,
            cats__vs__dogs__pb2.CatsVsDogsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
